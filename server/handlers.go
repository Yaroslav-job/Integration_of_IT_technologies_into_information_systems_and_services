package server

import (
	"encoding/json"
	"math/rand"
	"net/http"
	"strconv"
	"sync"
	"time"
)

var (
	game     GameState
	mu       sync.Mutex
	gameType string // –¢–∏–ø –∏–≥—Ä—ã: "player" –∏–ª–∏ "bot"
)

func StartGame(w http.ResponseWriter, r *http.Request) {
	gameType := r.URL.Query().Get("type")
	if gameType == "bot" {
		// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–≥—Ä—É –ø—Ä–æ—Ç–∏–≤ –±–æ—Ç–∞
		game.GameOver = false
		game.Turn = "üü¢"
		// –í–æ–∑–º–æ–∂–Ω–æ, –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –±–æ—Ç–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
	} else {
		// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–≥—Ä—É "–ò–≥—Ä–æ–∫ –ø—Ä–æ—Ç–∏–≤ –ò–≥—Ä–æ–∫–∞"
		game.GameOver = false
		game.Turn = "üü¢"
	}
	json.NewEncoder(w).Encode(game)
}

func HandleMove(w http.ResponseWriter, r *http.Request) {
	mu.Lock()
	defer mu.Unlock()

	if game.GameOver {
		json.NewEncoder(w).Encode(game)
		return
	}

	colStr := r.URL.Query().Get("column")
	col, err := strconv.Atoi(colStr)
	if err != nil || col < 0 || col > 6 {
		w.WriteHeader(http.StatusBadRequest)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ñ–∏—à–∫–∞ –µ—â–µ –Ω–µ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–æ–ª–æ–Ω–∫–µ
	for i := 5; i >= 0; i-- {
		if game.Board[i][col] == "" {
			game.Board[i][col] = game.Turn
			if checkWin(game.Turn, game.Board) {
				game.GameOver = true
				game.Winner = game.Turn
			} else {
				if isDraw(game.Board) {
					game.GameOver = true
				}
				// –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ö–æ–¥
				switch game.Turn {
				case "üü¢":
					game.Turn = "üî¥"
				case "üî¥":
					game.Turn = "üü¢"
				}
			}
			break
		}
	}

	// –ï—Å–ª–∏ –∏–≥—Ä–∞ –ø—Ä–æ—Ç–∏–≤ –±–æ—Ç–∞, –¥–µ–ª–∞–µ–º —Ö–æ–¥ –±–æ—Ç–∞
	if game.GameOver == false && game.Turn == "üî¥" && gameType == "bot" {
		makeSmartBotMove()
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
	json.NewEncoder(w).Encode(game)
}

func makeSmartBotMove() {
	// –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, –º–æ–∂–µ—Ç –ª–∏ –±–æ—Ç –≤—ã–∏–≥—Ä–∞—Ç—å –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∏–≥—Ä–æ–∫–∞
	col := findWinningMove("üî¥") // –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –≤—ã–∏–≥—Ä–∞—Ç—å
	if col == -1 {
		col = findWinningMove("üü¢") // –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –≤—ã–∏–≥—Ä–∞—Ç—å, –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∏–≥—Ä–æ–∫–∞
	}

	if col == -1 {
		// –ï—Å–ª–∏ –Ω–µ—Ç –≤—ã–∏–≥—Ä—ã—à–∞ –∏–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏, –¥–µ–ª–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ö–æ–¥
		col = getRandomMove()
	}

	// –í—ã–ø–æ–ª–Ω–∏–º —Ö–æ–¥ –≤ –Ω–∞–π–¥–µ–Ω–Ω—É—é –∫–æ–ª–æ–Ω–∫—É
	for i := 5; i >= 0; i-- {
		if game.Board[i][col] == "" {
			game.Board[i][col] = "üî¥"
			if checkWin("üî¥", game.Board) {
				game.GameOver = true
				game.Winner = "üî¥"
			} else if isDraw(game.Board) {
				game.GameOver = true
			} else {
				game.Turn = "üü¢" // –•–æ–¥ –∏–≥—Ä–æ–∫–∞
			}
			return
		}
	}
}

func findWinningMove(marker string) int {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –∫–æ–ª–æ–Ω–∫—É, –µ—Å–ª–∏ –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–∏–≥—Ä–∞—Ç—å ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ª–æ–Ω–∫—É
	for col := 0; col < 7; col++ {
		for row := 5; row >= 0; row-- {
			if game.Board[row][col] == "" {
				game.Board[row][col] = marker
				if checkWin(marker, game.Board) {
					game.Board[row][col] = "" // –°–Ω–∏–º–∞–µ–º —Ñ–∏—à–∫—É –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
					return col
				}
				game.Board[row][col] = "" // –°–Ω–∏–º–∞–µ–º —Ñ–∏—à–∫—É –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
				break
			}
		}
	}
	return -1
}

func getRandomMove() int {
	// –î–µ–ª–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ö–æ–¥
	rand.Seed(time.Now().UnixNano())
	for {
		col := rand.Intn(7) // –°–ª—É—á–∞–π–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞
		for row := 5; row >= 0; row-- {
			if game.Board[row][col] == "" {
				return col
			}
		}
	}
}

func HandleStart(w http.ResponseWriter, r *http.Request) {
	// –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –∏–≥—Ä—ã: "player" –∏–ª–∏ "bot"
	gameType = r.URL.Query().Get("type")
	ResetGame()
	json.NewEncoder(w).Encode(game)
}

func HandleReset(w http.ResponseWriter, r *http.Request) {
	mu.Lock()
	defer mu.Unlock()
	ResetGame()
	json.NewEncoder(w).Encode(game)
}
